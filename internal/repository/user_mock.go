// Code generated by MockGen. DO NOT EDIT.
// Source: user.go

// Package repository is a generated GoMock package.
package repository

import (
	gomock "github.com/golang/mock/gomock"
	model "logical-example/internal/model"
	reflect "reflect"
)

// MockUserRepository is a mock of UserRepository interface
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// FindOne mocks base method
func (m *MockUserRepository) FindOne(id int) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOne", id)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOne indicates an expected call of FindOne
func (mr *MockUserRepositoryMockRecorder) FindOne(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOne", reflect.TypeOf((*MockUserRepository)(nil).FindOne), id)
}

// FindOneFromRedis mocks base method
func (m *MockUserRepository) FindOneFromRedis(id int) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOneFromRedis", id)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOneFromRedis indicates an expected call of FindOneFromRedis
func (mr *MockUserRepositoryMockRecorder) FindOneFromRedis(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOneFromRedis", reflect.TypeOf((*MockUserRepository)(nil).FindOneFromRedis), id)
}

// MockmongoUserRepository is a mock of mongoUserRepository interface
type MockmongoUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockmongoUserRepositoryMockRecorder
}

// MockmongoUserRepositoryMockRecorder is the mock recorder for MockmongoUserRepository
type MockmongoUserRepositoryMockRecorder struct {
	mock *MockmongoUserRepository
}

// NewMockmongoUserRepository creates a new mock instance
func NewMockmongoUserRepository(ctrl *gomock.Controller) *MockmongoUserRepository {
	mock := &MockmongoUserRepository{ctrl: ctrl}
	mock.recorder = &MockmongoUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockmongoUserRepository) EXPECT() *MockmongoUserRepositoryMockRecorder {
	return m.recorder
}

// FindOne mocks base method
func (m *MockmongoUserRepository) FindOne(id int) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOne", id)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOne indicates an expected call of FindOne
func (mr *MockmongoUserRepositoryMockRecorder) FindOne(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOne", reflect.TypeOf((*MockmongoUserRepository)(nil).FindOne), id)
}

// MockredisUserRepository is a mock of redisUserRepository interface
type MockredisUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockredisUserRepositoryMockRecorder
}

// MockredisUserRepositoryMockRecorder is the mock recorder for MockredisUserRepository
type MockredisUserRepositoryMockRecorder struct {
	mock *MockredisUserRepository
}

// NewMockredisUserRepository creates a new mock instance
func NewMockredisUserRepository(ctrl *gomock.Controller) *MockredisUserRepository {
	mock := &MockredisUserRepository{ctrl: ctrl}
	mock.recorder = &MockredisUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockredisUserRepository) EXPECT() *MockredisUserRepositoryMockRecorder {
	return m.recorder
}

// FindOneFromRedis mocks base method
func (m *MockredisUserRepository) FindOneFromRedis(id int) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOneFromRedis", id)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOneFromRedis indicates an expected call of FindOneFromRedis
func (mr *MockredisUserRepositoryMockRecorder) FindOneFromRedis(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOneFromRedis", reflect.TypeOf((*MockredisUserRepository)(nil).FindOneFromRedis), id)
}
