// Code generated by MockGen. DO NOT EDIT.
// Source: user.go

// Package service is a generated GoMock package.
package service

import (
	gomock "github.com/golang/mock/gomock"
	model "logical-example/internal/model"
	repository "logical-example/internal/repository"
	reflect "reflect"
)

// MockUserService is a mock of UserService interface
type MockUserService struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceMockRecorder
}

// MockUserServiceMockRecorder is the mock recorder for MockUserService
type MockUserServiceMockRecorder struct {
	mock *MockUserService
}

// NewMockUserService creates a new mock instance
func NewMockUserService(ctrl *gomock.Controller) *MockUserService {
	mock := &MockUserService{ctrl: ctrl}
	mock.recorder = &MockUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserService) EXPECT() *MockUserServiceMockRecorder {
	return m.recorder
}

// GetUser mocks base method
func (m *MockUserService) GetUser(v string, repo repository.UserRepository) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", v, repo)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser
func (mr *MockUserServiceMockRecorder) GetUser(v, repo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockUserService)(nil).GetUser), v, repo)
}

// GetUserFromHTTP mocks base method
func (m *MockUserService) GetUserFromHTTP() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserFromHTTP")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetUserFromHTTP indicates an expected call of GetUserFromHTTP
func (mr *MockUserServiceMockRecorder) GetUserFromHTTP() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserFromHTTP", reflect.TypeOf((*MockUserService)(nil).GetUserFromHTTP))
}
